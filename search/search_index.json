{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pygeoapi is a Python server implementation of the OGC API suite of standards . The project emerged as part of the next generation OGC API efforts in 2018 and provides the capability for organizations to deploy a RESTful OGC API endpoint using OpenAPI, GeoJSON, and HTML. pygeoapi is open source and released under an MIT license . Install in 5 minutes python3 -m venv pygeoapi cd pygeoapi . bin/activate git clone https://github.com/geopython/pygeoapi.git cd pygeoapi pip3 install -r requirements.txt python3 setup.py install cp pygeoapi-config.yml example-config.yml vi example-config.yml # edit as required export PYGEOAPI_CONFIG=example-config.yml export PYGEOAPI_OPENAPI=example-openapi.yml pygeoapi openapi generate $PYGEOAPI_CONFIG > $PYGEOAPI_OPENAPI pygeoapi serve # in another terminal curl http://localhost:5000 # or open in a web browser Features At a glance: Easy to install: install a full implementation via pip or git Easy to deploy: via UbuntuGIS or the official Docker image Flexible: built on a robust plugin framework connect to custom data sources (files, services, databases, etc.) serve custom output formats implement custom processes and workflows deploy via Flask, Django, or any Python framework OGC Compliant: pygeoapi is certified OGC Compliant and an OGC Reference Implementation","title":"Home"},{"location":"#install-in-5-minutes","text":"python3 -m venv pygeoapi cd pygeoapi . bin/activate git clone https://github.com/geopython/pygeoapi.git cd pygeoapi pip3 install -r requirements.txt python3 setup.py install cp pygeoapi-config.yml example-config.yml vi example-config.yml # edit as required export PYGEOAPI_CONFIG=example-config.yml export PYGEOAPI_OPENAPI=example-openapi.yml pygeoapi openapi generate $PYGEOAPI_CONFIG > $PYGEOAPI_OPENAPI pygeoapi serve # in another terminal curl http://localhost:5000 # or open in a web browser","title":"Install in 5 minutes"},{"location":"#features","text":"At a glance: Easy to install: install a full implementation via pip or git Easy to deploy: via UbuntuGIS or the official Docker image Flexible: built on a robust plugin framework connect to custom data sources (files, services, databases, etc.) serve custom output formats implement custom processes and workflows deploy via Flask, Django, or any Python framework OGC Compliant: pygeoapi is certified OGC Compliant and an OGC Reference Implementation","title":"Features"},{"location":"documentation/","text":"Documentation Docs Current release Latest (master) Presentations Slides: FOSS4G 2021 presentation Slides: Default - Latest Slides: pygeoapi Practical Sessions - 118th OGC Member Meeting Slides: 2018 Video: Presentation at FOSS4G 2019 Video: Presentation at GeoPython 2020","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#docs","text":"Current release Latest (master)","title":"Docs"},{"location":"documentation/#presentations","text":"Slides: FOSS4G 2021 presentation Slides: Default - Latest Slides: pygeoapi Practical Sessions - 118th OGC Member Meeting Slides: 2018 Video: Presentation at FOSS4G 2019 Video: Presentation at GeoPython 2020","title":"Presentations"},{"location":"download/","text":"Download Current Stable Release (0.11.0) zip tar.gz All Releases Source Code Git PyPI https://pypi.python.org/pypi/pygeoapi Packages UbuntuGIS pygeoapi exists as a UbuntuGIS package in Launchpad","title":"Download"},{"location":"download/#download","text":"Current Stable Release (0.11.0) zip tar.gz All Releases","title":"Download"},{"location":"download/#source-code","text":"Git","title":"Source Code"},{"location":"download/#pypi","text":"https://pypi.python.org/pypi/pygeoapi","title":"PyPI"},{"location":"download/#packages","text":"","title":"Packages"},{"location":"download/#ubuntugis","text":"pygeoapi exists as a UbuntuGIS package in Launchpad","title":"UbuntuGIS"},{"location":"community/","text":"Community Code of Conduct In support of an inclusive and welcoming community, the pygeoapi code of conduct can always be found at https://github.com/geopython/pygeoapi/blob/master/CODE_OF_CONDUCT.md . There are numerous ways to interact with the pygeoapi community. Mailing List The pygeoapi mailing list enables users and developers to exchange ideas, discuss improvements / issues, and ask questions. To subscribe, visit https://lists.osgeo.org/mailman/listinfo/pygeoapi . Mailing list archives are available at https://lists.osgeo.org/pipermail/pygeoapi . GitHub Discussions pygeoapi also provides GitHub Discussions as a collaborative community space for general questions, ideas, and more. Chat pygeoapi provides open communication in real-time, and provides chat via Gitter, Slack, or IRC (note: connecting via either Gitter or Slack or IRC plugs you in to the same chat). PSC discussions, meetings and user discussion can typically be found in pygeoapi's chat. Gitter Gitter provides a web-based instant messaging and chatroom. The pygeoapi Gitter chatroom is public and open to anyone (you require a Gitter or Twitter account to sign in). Slack The OSGeo Slack is provided at https://osgeo.slack.com/pygeoapi . IRC The pygeoapi IRC can be found at irc://irc.freenode.net#pygeoapi . For those wishing only to follow repository changes/updates, the pygeoapi-activity IRC can be found at irc://irc.freenode.net#pygeoapi-activity . Twitter The official pygeoapi Twitter handle is at https://twitter.com/pygeoapi . Stack Overflow pygeoapi discussions on Stack Overflow can be found with the pygeoapi tag. Service Providers pygeoapi service providers (core development, support, training) can be found on the OSGeo Service Provider Directory . GitHub (Wiki, Issues, Code) The pygeoapi wiki provides an area for supporting information that frequently changes and / or is outside the scope of the formal documentation. The pygeoapi issue tracker is the place to report bugs or request enhancements. To submit a bug be sure to specify the version you are using, the appropriate component, a description of how to reproduce the bug, as well as what version of Python and platform. GitHub provides the ability for users to issue pull requests , and is the preferred way to have your contributions added to pygeoapi, although patches and other mechanisms are welcome as well. All pygeoapi source code is managed on GitHub, which includes the latest ( master ) and other supported branches. Security issues If you encounter a security vulnerability in pygeoapi please report as per our Security Policy Getting Involved Users, developers and others are more than welcome! There are plenty of ways to get involved: Documentation Fixing bugs Testing Core development (bug fixing, feature implementation, etc.) See https://github.com/geopython/pygeoapi/blob/master/CONTRIBUTING.md for more information on contributing.","title":"Community"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#code-of-conduct","text":"In support of an inclusive and welcoming community, the pygeoapi code of conduct can always be found at https://github.com/geopython/pygeoapi/blob/master/CODE_OF_CONDUCT.md . There are numerous ways to interact with the pygeoapi community.","title":"Code of Conduct"},{"location":"community/#mailing-list","text":"The pygeoapi mailing list enables users and developers to exchange ideas, discuss improvements / issues, and ask questions. To subscribe, visit https://lists.osgeo.org/mailman/listinfo/pygeoapi . Mailing list archives are available at https://lists.osgeo.org/pipermail/pygeoapi .","title":"Mailing List"},{"location":"community/#github-discussions","text":"pygeoapi also provides GitHub Discussions as a collaborative community space for general questions, ideas, and more.","title":"GitHub Discussions"},{"location":"community/#chat","text":"pygeoapi provides open communication in real-time, and provides chat via Gitter, Slack, or IRC (note: connecting via either Gitter or Slack or IRC plugs you in to the same chat). PSC discussions, meetings and user discussion can typically be found in pygeoapi's chat.","title":"Chat"},{"location":"community/#gitter","text":"Gitter provides a web-based instant messaging and chatroom. The pygeoapi Gitter chatroom is public and open to anyone (you require a Gitter or Twitter account to sign in).","title":"Gitter"},{"location":"community/#slack","text":"The OSGeo Slack is provided at https://osgeo.slack.com/pygeoapi .","title":"Slack"},{"location":"community/#irc","text":"The pygeoapi IRC can be found at irc://irc.freenode.net#pygeoapi . For those wishing only to follow repository changes/updates, the pygeoapi-activity IRC can be found at irc://irc.freenode.net#pygeoapi-activity .","title":"IRC"},{"location":"community/#twitter","text":"The official pygeoapi Twitter handle is at https://twitter.com/pygeoapi .","title":"Twitter"},{"location":"community/#stack-overflow","text":"pygeoapi discussions on Stack Overflow can be found with the pygeoapi tag.","title":"Stack Overflow"},{"location":"community/#service-providers","text":"pygeoapi service providers (core development, support, training) can be found on the OSGeo Service Provider Directory .","title":"Service Providers"},{"location":"community/#github-wiki-issues-code","text":"The pygeoapi wiki provides an area for supporting information that frequently changes and / or is outside the scope of the formal documentation. The pygeoapi issue tracker is the place to report bugs or request enhancements. To submit a bug be sure to specify the version you are using, the appropriate component, a description of how to reproduce the bug, as well as what version of Python and platform. GitHub provides the ability for users to issue pull requests , and is the preferred way to have your contributions added to pygeoapi, although patches and other mechanisms are welcome as well. All pygeoapi source code is managed on GitHub, which includes the latest ( master ) and other supported branches.","title":"GitHub (Wiki, Issues, Code)"},{"location":"community/#security-issues","text":"If you encounter a security vulnerability in pygeoapi please report as per our Security Policy","title":"Security issues"},{"location":"community/#getting-involved","text":"Users, developers and others are more than welcome! There are plenty of ways to get involved: Documentation Fixing bugs Testing Core development (bug fixing, feature implementation, etc.) See https://github.com/geopython/pygeoapi/blob/master/CONTRIBUTING.md for more information on contributing.","title":"Getting Involved"},{"location":"community/psc/","text":"Project Steering Committee In accordance with RFC1 , the authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc PSC Meetings PSC meetings are managed on the pygeoapi wiki . Members (in alphabetical order) Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Project Steering Committee"},{"location":"community/psc/#project-steering-committee","text":"In accordance with RFC1 , the authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc","title":"Project Steering Committee"},{"location":"community/psc/#psc-meetings","text":"PSC meetings are managed on the pygeoapi wiki .","title":"PSC Meetings"},{"location":"community/psc/#members-in-alphabetical-order","text":"Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Members (in alphabetical order)"},{"location":"community/service-providers/","text":"Service Providers pygeoapi is developed and supported by a a number of businesses, organizations and individuals around the world. Using a service provider is a great way to get started with pygeoapi and contributes to the ongoing sustainability of the project. Services include (but are not limited to): training setup/installation/deployment custom integration bug fixing features/enhancements core development maintenance/packaging/distribution documentation The section below provides a list of service providers who can help you in getting the best out of your pygeoapi investment. The list is randomized on each page load. If you are a service provider and would like to be listed on this page, please feel free to add yourself to the service provider list . GeoBeyond Srl TODO GeoCat B.V. TODO GeoComvos Ltd TODO Just Objects B.V. TODO // shuffle divs randomly // from https://stackoverflow.com/a/43980082 (2022-01-15) function shuffle() { var container = document.getElementById(\"service-provider-list\"); var elementsArray = Array.prototype.slice.call(container.getElementsByClassName(\"service-provider\")); elementsArray.forEach(function(element){ container.removeChild(element); }) shuffleArray(elementsArray); elementsArray.forEach(function(element){ container.appendChild(element); }) } function shuffleArray(array) { for (var i = array.length - 1; i > 0; i--) { var j = Math.floor(Math.random() * (i + 1)); var temp = array[i]; array[i] = array[j]; array[j] = temp; } return array; } shuffle();","title":"Service Providers"},{"location":"community/service-providers/#service-providers","text":"pygeoapi is developed and supported by a a number of businesses, organizations and individuals around the world. Using a service provider is a great way to get started with pygeoapi and contributes to the ongoing sustainability of the project. Services include (but are not limited to): training setup/installation/deployment custom integration bug fixing features/enhancements core development maintenance/packaging/distribution documentation The section below provides a list of service providers who can help you in getting the best out of your pygeoapi investment. The list is randomized on each page load. If you are a service provider and would like to be listed on this page, please feel free to add yourself to the service provider list .","title":"Service Providers"},{"location":"development/","text":"Development Project Steering Committee Request for Comments (RFCs)","title":"Development"},{"location":"development/#development","text":"Project Steering Committee Request for Comments (RFCs)","title":"Development"},{"location":"development/rfc/","text":"Request for Comments (RFC) An RFC is a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Internet and Internet-connected systems. It is submitted either for peer review or simply to convey new concepts, information, or (occasionally) engineering humor. An RFC describes a major change in the technological underpinnings of pygeoapi, major additions to functionality, or changes in the direction of the project. RFC1: Project Steering Committee Guidelines","title":"Request for Comments"},{"location":"development/rfc/#request-for-comments-rfc","text":"An RFC is a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Internet and Internet-connected systems. It is submitted either for peer review or simply to convey new concepts, information, or (occasionally) engineering humor. An RFC describes a major change in the technological underpinnings of pygeoapi, major additions to functionality, or changes in the direction of the project. RFC1: Project Steering Committee Guidelines","title":"Request for Comments (RFC)"},{"location":"development/rfc/1/","text":"RFC1: Project Steering Committee Guidelines date: 2019-10-09 author: Tom Kralidis contact: tomkralidis@gmail.com status: adopted modified: 2019-10-26 Summary This RFC describes the pygeoapi Project Steering Committee (PSC) rules of engagement and decision making process for all aspects of the project. Examples of PSC responsibilities: ensuring community code of conduct setting the overall development roadmap technical standards and policies (coding conventions, etc.) ensuring a regular release schedule (major and maintenance) reviewing RFCs project infrastructure (issue tracker, source code management, hosting, etc.) formalization with external entities such as OSGeo, OGC (CITE), etc. setting project priorities In brief the project team votes on proposals on the pygeoapi mailing list . Proposals are available for review for at least two days, and a single veto is sufficient to delay progress though ultimately a majority of members can pass a proposal. Detailed Process Proposals are written and submitted to the pygeoapi mailing list for discussion and voting, by anyone Proposals need to be available for review for a least two business days before a final decision can be made RFCs can be drafted on the pygeoapi wiki, and once voted on, cast on website at https://pygeoapi.io/development/rfc/xxx Respondants may vote using the following rubric: +1: support the proposal and a willingness to support implementation -1: veto the proposal, but must provide clear reasoning and alternate approaches to resolving issues within the two days -0: mild disagreement, but has no effect 0: no opinion +0: mild support, but has no effect Anyone can comment on proposals, but only PSC member votes will be counted A proposal will be accepted if it receives +2 (including the author) and no vetoes (-1) If a proposal is vetoed, and it cannot be revised to satisfy all parties, then it can be resubmitted for an override vote in which a majority of all eligible votes indicating +1 is sufficient to pass it. Note that this is a majority of all committee members, not just those who actively vote Upon completion of discussion and voting the author should announce whether they are proceeding (proposal accepted) or are withdrawing (vetoed) The Chair gets a vote The Chair is responsible for keeping track of who is a member of the PSC. The authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc Addition and removal of members from the PSC, including selection of a Chair should be handled as a proposal to the committee The Chair adjudicates in cases of disputes about voting When is a Vote Required? changes in committee membership significant changes to project infrastructure backward compatibility issues significant feature implementation(s) Changing the inter-subsystem API, or objects Issues of process/procedures Release management Relationships with external entities (OSGeo, OGC, etc.) Anything controversial Observations The Chair is the ultimate adjudicator if things break down The absolute majority rule can be used to override an obstructionist veto, but it is intended that in normal circumstances vetoers need to be convinced to withdraw their veto. We are trying to reach consensus It is anticipated that seperate activities will exist to manage conferences, presentations, websites, demos, etc. Committee Membership The PSC is comprised of individuals who are: technical contributors documentation and training contributors other prominent members of the pygeoapi community contributors of strategic direction to pygeoapi as an SDI component Adding Members Any member of the pygeoapi mailing list may nominate someone for committee membership at any time. Only existing PSC members may vote on new members. Nominees must receive a majority vote from existing members to be added to the PSC. Stepping Down If for some reason a PSC member is not able to fully participate then they are free to step down. If a member is not active for a period of 12 months then the committee reserves the right to seek nominations to fill that position. PSC members who have stepped down or have been replaced as certainly welcome to return upon nomincation. Membership Responsibilities Guiding Development Members should take an active role guiding the development of new features they feel passionate about. Once a change request has been accepted and given the go ahead to proceed does not mean the members are free of their obligation. PSC members voting +1 for a change request are expected to stay engaged and ensure the change is implemented and documented in a way that is most beneficial to users. Note that this applies not only to change requests that affect code, but also those that affect the website, technical infrastructure, policies and standards. Meeting Attendance PSC members are expected to participate in pre-scheduled Gitter meetings. Initial frequency is set to once a month. Mailing List Participation PSC members are expected to be active on the pygeoapi mailing list and Gitter chat. Non-developer members of the PSC are not expected to respond to coding level questions on the pygeoapi mailing list, however they are expected to provide their thoughts and opinions on user level requirements and compatibility issues when RFC discussions take place. Bootstrapping Prior to forming the PSC, this RFC must be distributed before the pygeoapi community for review and comment. Any and all substantive comments are encouraged to be discussed via the pygeoapi mailing list or Gitter channel. Tom Kralidis is declared initial Chair of the PSC. Initial PSC members are (in alphabetical order): Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos Voting History Adopted on 2019-10-26 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"RFC1 - Project Steering Committee Guidelines"},{"location":"development/rfc/1/#rfc1-project-steering-committee-guidelines","text":"date: 2019-10-09 author: Tom Kralidis contact: tomkralidis@gmail.com status: adopted modified: 2019-10-26","title":"RFC1: Project Steering Committee Guidelines"},{"location":"development/rfc/1/#summary","text":"This RFC describes the pygeoapi Project Steering Committee (PSC) rules of engagement and decision making process for all aspects of the project. Examples of PSC responsibilities: ensuring community code of conduct setting the overall development roadmap technical standards and policies (coding conventions, etc.) ensuring a regular release schedule (major and maintenance) reviewing RFCs project infrastructure (issue tracker, source code management, hosting, etc.) formalization with external entities such as OSGeo, OGC (CITE), etc. setting project priorities In brief the project team votes on proposals on the pygeoapi mailing list . Proposals are available for review for at least two days, and a single veto is sufficient to delay progress though ultimately a majority of members can pass a proposal.","title":"Summary"},{"location":"development/rfc/1/#detailed-process","text":"Proposals are written and submitted to the pygeoapi mailing list for discussion and voting, by anyone Proposals need to be available for review for a least two business days before a final decision can be made RFCs can be drafted on the pygeoapi wiki, and once voted on, cast on website at https://pygeoapi.io/development/rfc/xxx Respondants may vote using the following rubric: +1: support the proposal and a willingness to support implementation -1: veto the proposal, but must provide clear reasoning and alternate approaches to resolving issues within the two days -0: mild disagreement, but has no effect 0: no opinion +0: mild support, but has no effect Anyone can comment on proposals, but only PSC member votes will be counted A proposal will be accepted if it receives +2 (including the author) and no vetoes (-1) If a proposal is vetoed, and it cannot be revised to satisfy all parties, then it can be resubmitted for an override vote in which a majority of all eligible votes indicating +1 is sufficient to pass it. Note that this is a majority of all committee members, not just those who actively vote Upon completion of discussion and voting the author should announce whether they are proceeding (proposal accepted) or are withdrawing (vetoed) The Chair gets a vote The Chair is responsible for keeping track of who is a member of the PSC. The authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc Addition and removal of members from the PSC, including selection of a Chair should be handled as a proposal to the committee The Chair adjudicates in cases of disputes about voting","title":"Detailed Process"},{"location":"development/rfc/1/#when-is-a-vote-required","text":"changes in committee membership significant changes to project infrastructure backward compatibility issues significant feature implementation(s) Changing the inter-subsystem API, or objects Issues of process/procedures Release management Relationships with external entities (OSGeo, OGC, etc.) Anything controversial","title":"When is a Vote Required?"},{"location":"development/rfc/1/#observations","text":"The Chair is the ultimate adjudicator if things break down The absolute majority rule can be used to override an obstructionist veto, but it is intended that in normal circumstances vetoers need to be convinced to withdraw their veto. We are trying to reach consensus It is anticipated that seperate activities will exist to manage conferences, presentations, websites, demos, etc.","title":"Observations"},{"location":"development/rfc/1/#committee-membership","text":"The PSC is comprised of individuals who are: technical contributors documentation and training contributors other prominent members of the pygeoapi community contributors of strategic direction to pygeoapi as an SDI component","title":"Committee Membership"},{"location":"development/rfc/1/#adding-members","text":"Any member of the pygeoapi mailing list may nominate someone for committee membership at any time. Only existing PSC members may vote on new members. Nominees must receive a majority vote from existing members to be added to the PSC.","title":"Adding Members"},{"location":"development/rfc/1/#stepping-down","text":"If for some reason a PSC member is not able to fully participate then they are free to step down. If a member is not active for a period of 12 months then the committee reserves the right to seek nominations to fill that position. PSC members who have stepped down or have been replaced as certainly welcome to return upon nomincation.","title":"Stepping Down"},{"location":"development/rfc/1/#membership-responsibilities","text":"","title":"Membership Responsibilities"},{"location":"development/rfc/1/#guiding-development","text":"Members should take an active role guiding the development of new features they feel passionate about. Once a change request has been accepted and given the go ahead to proceed does not mean the members are free of their obligation. PSC members voting +1 for a change request are expected to stay engaged and ensure the change is implemented and documented in a way that is most beneficial to users. Note that this applies not only to change requests that affect code, but also those that affect the website, technical infrastructure, policies and standards.","title":"Guiding Development"},{"location":"development/rfc/1/#meeting-attendance","text":"PSC members are expected to participate in pre-scheduled Gitter meetings. Initial frequency is set to once a month.","title":"Meeting Attendance"},{"location":"development/rfc/1/#mailing-list-participation","text":"PSC members are expected to be active on the pygeoapi mailing list and Gitter chat. Non-developer members of the PSC are not expected to respond to coding level questions on the pygeoapi mailing list, however they are expected to provide their thoughts and opinions on user level requirements and compatibility issues when RFC discussions take place.","title":"Mailing List Participation"},{"location":"development/rfc/1/#bootstrapping","text":"Prior to forming the PSC, this RFC must be distributed before the pygeoapi community for review and comment. Any and all substantive comments are encouraged to be discussed via the pygeoapi mailing list or Gitter channel. Tom Kralidis is declared initial Chair of the PSC. Initial PSC members are (in alphabetical order): Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Bootstrapping"},{"location":"development/rfc/1/#voting-history","text":"Adopted on 2019-10-26 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"Voting History"},{"location":"logo/","text":"pygeoapi logo The pygeoapi logo was created on August 21, 2019 on https://www.freelogodesign.org by justb4 . The design files can be found in the subdirs below. Usable logo files can be found under img . As that dir is in gh-pages which is CNAMEd to https://pygeoapi.io, pygeoapi logos and icons can be linked directly without a need for copying: e.g. https://pygeoapi.io/img/pygeoapi-logo.png or without transparency: https://pygeoapi.io/img/pygeoapi-logo-notrans.png. Result Logo Icon Design In theory it is possible to recreate the logo, or a color-variant, but the freelogodesign.org session is one-time (with payment) only. Below a screenshot of the design session. Within this session one can mix icons and texts, hundreds of icons are available (via search) The logo was created as follows: provide text, choose domain \"Technology\" ignore all suggestions, start a fresh logo with just text text: \"pygeoapi\", selected the RoboSlab Regular Font icon 1: search for a cog or cogwheel icon (there are hundreds available) until you find one without a circle internally icon 2: search for a marker icon place the marker icon within the cogwheel icon colors: blue is \"Python logo blue\": hex #306998 and \"black\" is grayish: #3a3a3a . ensure result has transparency saved and paid EUR 34,-, received .zip file with designs SVGs various resolutions shortly after that NB the square pygeoapi icon was cut off manually (in Preview Mac) also favicons need to be created manually","title":"pygeoapi logo"},{"location":"logo/#pygeoapi-logo","text":"The pygeoapi logo was created on August 21, 2019 on https://www.freelogodesign.org by justb4 . The design files can be found in the subdirs below. Usable logo files can be found under img . As that dir is in gh-pages which is CNAMEd to https://pygeoapi.io, pygeoapi logos and icons can be linked directly without a need for copying: e.g. https://pygeoapi.io/img/pygeoapi-logo.png or without transparency: https://pygeoapi.io/img/pygeoapi-logo-notrans.png.","title":"pygeoapi logo"},{"location":"logo/#result","text":"","title":"Result"},{"location":"logo/#logo","text":"","title":"Logo"},{"location":"logo/#icon","text":"","title":"Icon"},{"location":"logo/#design","text":"In theory it is possible to recreate the logo, or a color-variant, but the freelogodesign.org session is one-time (with payment) only. Below a screenshot of the design session. Within this session one can mix icons and texts, hundreds of icons are available (via search) The logo was created as follows: provide text, choose domain \"Technology\" ignore all suggestions, start a fresh logo with just text text: \"pygeoapi\", selected the RoboSlab Regular Font icon 1: search for a cog or cogwheel icon (there are hundreds available) until you find one without a circle internally icon 2: search for a marker icon place the marker icon within the cogwheel icon colors: blue is \"Python logo blue\": hex #306998 and \"black\" is grayish: #3a3a3a . ensure result has transparency saved and paid EUR 34,-, received .zip file with designs SVGs various resolutions shortly after that NB the square pygeoapi icon was cut off manually (in Preview Mac) also favicons need to be created manually","title":"Design"},{"location":"presentations/","text":"Presentations FOSS4G 2021 presentaiton Slides: Default - Latest Slides: 2018 Video: Presentation at FOSS4G 2019 Video: Presentation at GeoPython 2020","title":"Index"},{"location":"presentations/#presentations","text":"FOSS4G 2021 presentaiton Slides: Default - Latest Slides: 2018 Video: Presentation at FOSS4G 2019 Video: Presentation at GeoPython 2020","title":"Presentations"},{"location":"presentations/2018/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/2018/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/2018/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/2018/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/2018/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/2018/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/2018/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/2018/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/2018/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/2018/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/2018/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentations/default/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/default/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/default/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/default/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/default/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/default/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/default/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/default/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/default/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/default/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/default/plugin/markdown/example/#external-33","text":"","title":"External 3.3"}]}